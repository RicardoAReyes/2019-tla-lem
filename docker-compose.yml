version: '3'

services:

  # Nginx instance controlling traffic to each service.
  nginx:
    restart: always
    build:
      context: nginx
      args:
        - HOSTNAME=${HOSTNAME}
    ports:
      - 80:80
      - 443:443
    container_name: docker_nginx
    volumes:
      - ./nginx/letsencrypt:/usr/share/nginx/html
      - ./certbot/etc:/usr/share/keys
    networks:
      - public

  # Certbot for SSL automation.
  certbot:
    container_name: 'docker_certbot'
    image: certbot/certbot
    volumes:
      - ./keys:/var/lib/letsencrypt
      - ./nginx/letsencrypt:/data/letsencrypt
      - ./certbot/etc:/etc/letsencrypt
      - ./certbot/log:/var/log/letsencrypt
    networks:
      - public
    depends_on:
      - nginx

  # Kafka monitor.
  monitor:
    restart: always
    build: 
      context: kafka-monitor
    container_name: monitor
    environment:
      KAFKA_BROKER: "${KAFKA_BROKER}"
      KAFKA_XAPI_TOPIC: "${KAFKA_XAPI_TOPIC}"
      KAFKA_SASL_USER: "${KAFKA_SASL_USER}"
      KAFKA_SASL_PASS: "${KAFKA_SASL_PASS}"
    networks:
      - public
      
  # "Mail Sorting" service for recognizing/publishing authoritative xAPI.
  mail:
    restart: always
    build: 
      context: mail-sorter
    container_name: mail
    environment:
      KAFKA_BROKER: "${KAFKA_BROKER}"
      KAFKA_XAPI_TOPIC: "${KAFKA_XAPI_TOPIC}"
      KAFKA_SASL_USER: "${KAFKA_SASL_USER}"
      KAFKA_SASL_PASS: "${KAFKA_SASL_PASS}"
    networks:
      - public

  # Experience service for LEM / LP.
  experience:
    restart: always
    build: 
      context: experience
    ports:
      - 3000
    container_name: experience
    networks:
      - public

  # Goal service for LEM / LP.
  goals:
    restart: always
    build: 
      context: goals
    container_name: goals
    networks:
      - public
    volumes:
      - ./goals/data:/usr/src/app/data
      
  # Goal service for LEM / LP.
  profile:
    restart: always
    build: 
      context: profile
    container_name: profile
    networks:
      - public
    volumes:
      - ./profile/data:/usr/src/app/data
    environment:  
      LRS_ENDPOINT: "${LRS_ENDPOINT}"
      LRS_USER: "${LRS_USER}"
      LRS_PASS: "${LRS_PASS}"

  # Competency service for LEM / LP.
  competencies:
    restart: always
    build: 
      context: competencies
    container_name: competencies
    networks:
      - public
    volumes:
      - ./competencies/data:/usr/src/app/data
      
  # Scheduler service for LEM / LP.
  scheduler:
    restart: always
    build: 
      context: scheduler
    container_name: scheduler
    networks:
      - public
    environment:
      APP_PORT: 3000
      LRS_ENDPOINT: "${LRS_ENDPOINT}"
      LRS_USER: "${LRS_USER}"
      LRS_PASS: "${LRS_PASS}"
    volumes:
      - ./scheduler/data:/usr/src/app/data
      
  # Resolution service for LRP xAPI.
  resolver:
    restart: always
    build: 
      context: resolver
    container_name: resolver
    networks:
      - public
    environment:
      APP_PORT: 3000
      LRS_ENDPOINT: "${LRS_ENDPOINT}"
      LRS_USER: "${LRS_USER}"
      LRS_PASS: "${LRS_PASS}"

  mom:
    restart: always
    build: 
      context: mom-helper
    container_name: mom
    networks:
      - public
    environment:
      LRS_ENDPOINT: "${LRS_ENDPOINT}"
      LRS_USER: "${LRS_USER}"
      LRS_PASS: "${LRS_PASS}"
      APP_PORT: 3000

  portal:
    restart: always
    build: 
      context: adl-portal
    container_name: portal
    networks:
      - public
    environment:
      APP_PORT: 3000
      LRS_ENDPOINT: "${LRS_ENDPOINT}"
      LRS_USER: "${LRS_USER}"
      LRS_PASS: "${LRS_PASS}"

  mobile:
    restart: always
    build: 
      context: mobile
    container_name: mobile
    networks:
      - public
    environment:
      APP_PORT: 3000
      LRS_ENDPOINT: "${LRS_ENDPOINT}"
      LRS_USER: "${LRS_USER}"
      LRS_PASS: "${LRS_PASS}"

networks:
  public: 
    driver: bridge
